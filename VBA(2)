Private Declare PtrSafe Function BitBlt Lib "gdi32" (ByVal hDestDC As LongPtr, ByVal x As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal hSrcDC As LongPtr, ByVal xSrc As Long, ByVal ySrc As Long, ByVal dwRop As Long) As Long
Private Declare PtrSafe Function CreateCompatibleBitmap Lib "gdi32" (ByVal hdc As LongPtr, ByVal nWidth As Long, ByVal nHeight As Long) As LongPtr
Private Declare PtrSafe Function CreateCompatibleDC Lib "gdi32" (ByVal hdc As LongPtr) As LongPtr
Private Declare PtrSafe Function DeleteDC Lib "gdi32" (ByVal hdc As LongPtr) As Long
Private Declare PtrSafe Function DeleteObject Lib "gdi32" (ByVal hObject As LongPtr) As Long
Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" (ByVal hdc As LongPtr, ByVal nIndex As Long) As Long
Private Declare PtrSafe Function GetDC Lib "user32" (ByVal hWnd As LongPtr) As LongPtr
Private Declare PtrSafe Function ReleaseDC Lib "user32" (ByVal hWnd As LongPtr, ByVal hdc As LongPtr) As Long
Private Declare PtrSafe Function SelectObject Lib "gdi32" (ByVal hdc As LongPtr, ByVal hObject As LongPtr) As LongPtr
Private Declare PtrSafe Function GdipCreateBitmapFromHBITMAP Lib "gdiplus" (ByVal hbm As LongPtr, ByVal hPal As LongPtr, ByRef Bitmap As LongPtr) As Long
Private Declare PtrSafe Function GdipSaveImageToFile Lib "gdiplus" (ByVal Image As LongPtr, ByVal Filename As LongPtr, ByRef ClsidEncoder As GdiplusUUID, ByVal EncoderParams As LongPtr) As Long
Private Declare PtrSafe Function GdiplusStartup Lib "gdiplus" (ByRef Token As LongPtr, ByRef InputBuf As GdiplusStartupInput, ByVal OutputBuf As LongPtr) As Long
Private Declare PtrSafe Function GdiplusShutdown Lib "gdiplus" (ByVal Token As LongPtr) As Long
Private Declare PtrSafe Function CLSIDFromString Lib "ole32" (ByVal lpsz As LongPtr, ByRef pclsid As GdiplusUUID) As Long

Private Type GdiplusStartupInput
    GdiplusVersion As Long
    DebugEventCallback As LongPtr
    SuppressBackgroundThread As Long
    SuppressExternalCodecs As Long
End Type

Private Type GdiplusUUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(0 To 7) As Byte
End Type

Private Const SRCCOPY As Long = &HCC0020
Private Const CAPTUREBLT As Long = &H40000000

Private Declare PtrSafe Sub keybd_event Lib "user32" (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Long, ByVal dwExtraInfo As Long)
Private Const VK_F11 As Byte = &H7A
Private Const VK_MENU As Byte = &H12
Private Const VK_F4 As Byte = &H73
Private Const KEYEVENTF_KEYUP As Long = &H2

Sub SendF11Key()
    keybd_event VK_F11, 0, 0, 0
    keybd_event VK_F11, 0, KEYEVENTF_KEYUP, 0
End Sub

Sub SendAltF4Key()
    keybd_event VK_MENU, 0, 0, 0
    keybd_event VK_F4, 0, 0, 0
    keybd_event VK_F4, 0, KEYEVENTF_KEYUP, 0
    keybd_event VK_MENU, 0, KEYEVENTF_KEYUP, 0
End Sub

Sub CaptureScreenshot(savePath As String)
    Dim screenDC As LongPtr
    Dim memDC As LongPtr
    Dim hBmp As LongPtr
    Dim hOldBmp As LongPtr
    Dim width As Long
    Dim height As Long
    Dim gToken As LongPtr
    Dim gInput As GdiplusStartupInput
    Dim Bitmap As LongPtr
    Dim ClsidEncoder As GdiplusUUID
    
    ' Initialize GDI+
    gInput.GdiplusVersion = 1
    GdiplusStartup gToken, gInput, 0

    ' Get the desktop device context
    screenDC = GetDC(0)
    
    ' Create a memory device context compatible with the screen
    memDC = CreateCompatibleDC(screenDC)
    
    ' Get screen width and height
    width = GetDeviceCaps(screenDC, 8) ' 8 is for HORZRES
    height = GetDeviceCaps(screenDC, 10) ' 10 is for VERTRES
    
    ' Create a compatible bitmap for the screen
    hBmp = CreateCompatibleBitmap(screenDC, width, height)
    
    ' Select the compatible bitmap into the memory DC
    hOldBmp = SelectObject(memDC, hBmp)
    
    ' BitBlt screen to memory DC
    BitBlt memDC, 0, 0, width, height, screenDC, 0, 0, SRCCOPY Or CAPTUREBLT
    
    ' Create GDI+ bitmap from HBITMAP
    GdipCreateBitmapFromHBITMAP hBmp, 0, Bitmap
    
    ' Get encoder CLSID
    CLSIDFromString StrPtr("{557CF406-1A04-11D3-9A73-0000F81EF32E}"), ClsidEncoder ' PNG encoder CLSID
    
    ' Save bitmap to file
    GdipSaveImageToFile Bitmap, StrPtr(savePath), ClsidEncoder, 0
    
    ' Cleanup
    SelectObject memDC, hOldBmp
    DeleteObject hBmp
    DeleteDC memDC
    ReleaseDC 0, screenDC
    
    ' Shutdown GDI+
    GdiplusShutdown gToken
End Sub

Sub clickImFeelingLuckyAndTakeScreenshot()
    ' Initialize the browser instance
    Dim chrome As New CDPBrowser
    chrome.start reAttach:=False
    chrome.show
    
    ' Send F11 key to maximize the window
    Application.wait (Now + TimeValue("0:00:02")) ' Wait for the browser to open
    SendF11Key
    Application.wait (Now + TimeValue("0:00:02")) ' Wait for the browser to maximize

    ' Navigate to Google's homepage
    chrome.navigate "https://www.google.com"
    
    ' Wait for the page to load completely
    chrome.wait
    
    ' Retrieve the "I'm Feeling Lucky" button using its class name and click it
    Dim feelingLuckyButton As CDPElement
    Set feelingLuckyButton = chrome.getElementByQuery("input.RNmpXc[name='btnI']")
    feelingLuckyButton.click
    
    ' Optionally, wait for a few seconds to see the result
    Application.wait (Now + TimeValue("0:00:05"))
    
    ' Take a screenshot
    CaptureScreenshot "C:\Screenshots\screenshot.png"
    
    ' Wait for 5 seconds
    Application.wait (Now + TimeValue("0:00:05"))
    
    ' Close the browser using Alt+F4
    SendAltF4Key
    
    ' Quit CDP session
    chrome.quit
End Sub

Sub TestClickAndScreenshot()
    clickImFeelingLuckyAndTakeScreenshot
End Sub


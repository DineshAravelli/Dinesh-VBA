Option Explicit

' Windows API declarations for keyboard events
Private Declare PtrSafe Sub keybd_event Lib "user32" (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Long, ByVal dwExtraInfo As Long)
Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
Private Declare PtrSafe Function ShowWindow Lib "user32" (ByVal hwnd As LongPtr, ByVal nCmdShow As Long) As Long

Private Const SW_MAXIMIZE As Long = 3

' Virtual Key codes
Private Const VK_CONTROL As Byte = &H11
Private Const VK_SHIFT As Byte = &H10
Private Const VK_C As Byte = &H43
Private Const VK_P As Byte = &H50
Private Const VK_RETURN As Byte = &HD

Private Const KEYEVENTF_KEYUP = &H2

Sub SearchViratKohliAndCaptureScreenshot()
    Dim searchURL As String
    Dim chromePath As String
    Dim hwnd As LongPtr
    Dim downloadPath As String
    Dim name As String
    name = "Virat Kohli" ' Define the search term
    
    ' Define the download path where screenshots will be saved
    downloadPath = "C:\Screenshots"
    
    ' Ensure folder exists or create it
    If Dir(downloadPath, vbDirectory) = "" Then
        MkDir downloadPath
    End If
    
    ' Open Chrome with the search URL for "Virat Kohli"
    chromePath = """C:\Program Files (x86)\Google\Chrome\Application\chrome.exe""" ' Adjust path as needed
    searchURL = "https://www.google.com/search?q=" & Replace(name, " ", "+")
    
    ' Launch Chrome and navigate to search page
    Shell chromePath & " " & searchURL, vbNormalFocus
    
    ' Wait for Chrome to open
    Application.wait Now + TimeValue("00:00:05")
    
    ' Maximize the Chrome window (if needed)
    hwnd = FindWindow("Chrome_WidgetWin_1", vbNullString)
    If hwnd <> 0 Then
        ShowWindow hwnd, SW_MAXIMIZE
        SetForegroundWindow hwnd
    End If
    
    ' Simulate Ctrl + Shift + C to open Inspect Element (DevTools)
    SimulateCtrlShiftC
    
    ' Wait for DevTools to open
    Application.wait Now + TimeValue("00:00:05")
    
    ' Simulate Ctrl + Shift + P to open the Command Palette
    SimulateCtrlShiftP
    
    ' Wait for the Command Palette to open
    Application.wait Now + TimeValue("00:00:02")
    
    ' Type "Capture full size screenshot" in the command palette
    sendKeys "capture full size screenshot", True
    
    ' Simulate pressing Enter to capture the screenshot
    Application.wait Now + TimeValue("00:00:02")
    keybd_event VK_RETURN, 0, 0, 0
    keybd_event VK_RETURN, 0, KEYEVENTF_KEYUP, 0
    
    ' Wait for the screenshot to be saved (delay before moving the file)
    Application.wait Now + TimeValue("00:00:05")
    
    ' Move the most recent file from the Downloads folder to the specified folder and rename it based on the search query
    MoveMostRecentDownload downloadPath, name
End Sub

' Simulate Ctrl + Shift + C for Inspect Element (DevTools)
Sub SimulateCtrlShiftC()
    ' Press Ctrl + Shift + C
    keybd_event VK_CONTROL, 0, 0, 0
    keybd_event VK_SHIFT, 0, 0, 0
    keybd_event VK_C, 0, 0, 0
    
    ' Release keys
    keybd_event VK_C, 0, KEYEVENTF_KEYUP, 0
    keybd_event VK_SHIFT, 0, KEYEVENTF_KEYUP, 0
    keybd_event VK_CONTROL, 0, KEYEVENTF_KEYUP, 0
End Sub

' Simulate Ctrl + Shift + P for the Command Palette
Sub SimulateCtrlShiftP()
    ' Press Ctrl + Shift + P
    keybd_event VK_CONTROL, 0, 0, 0
    keybd_event VK_SHIFT, 0, 0, 0
    keybd_event VK_P, 0, 0, 0
    
    ' Release keys
    keybd_event VK_P, 0, KEYEVENTF_KEYUP, 0
    keybd_event VK_SHIFT, 0, KEYEVENTF_KEYUP, 0
    keybd_event VK_CONTROL, 0, KEYEVENTF_KEYUP, 0
End Sub

' Move the most recent downloaded file from the Downloads folder to the target folder and rename it
Sub MoveMostRecentDownload(targetFolder As String, newFileName As String)
    Dim fso As Object
    Dim sourceFolder As String
    Dim userName As String
    Dim recentFile As Object
    Dim recentFilePath As String
    Dim destinationFile As String
    Dim extension As String
    
    ' Get the user's username
    userName = Environ("USERNAME")
    
    ' Define the Downloads folder path
    sourceFolder = "C:\Users\" & userName & "\Downloads\"
    
    ' Create a FileSystemObject
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' Get the most recent file from the Downloads folder
    Set recentFile = GetMostRecentFile(sourceFolder)
    
    If Not recentFile Is Nothing Then
        ' Move the most recent file to the target folder
        recentFilePath = recentFile.Path
        extension = fso.GetExtensionName(recentFilePath)
        newFileName = Replace(newFileName, " ", "_") & "." & extension
        destinationFile = targetFolder & "\" & newFileName
        
        ' If the file already exists, append a timestamp or increment
        If fso.FileExists(destinationFile) Then
            newFileName = GenerateUniqueFileName(targetFolder, newFileName)
            destinationFile = targetFolder & "\" & newFileName
        End If
        
        ' Move and rename the file
        fso.MoveFile recentFilePath, destinationFile
    End If
End Sub

' Get the most recent file from the specified folder
Function GetMostRecentFile(folderPath As String) As Object
    Dim fso As Object
    Dim folder As Object
    Dim file As Object
    Dim recentFile As Object
    Dim mostRecentDate As Date
    
    ' Create a FileSystemObject
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' Get the folder object
    Set folder = fso.GetFolder(folderPath)
    
    ' Loop through the files in the folder to find the most recent one
    mostRecentDate = #1/1/1900# ' Initialize to a very old date
    For Each file In folder.Files
        If file.DateLastModified > mostRecentDate Then
            Set recentFile = file
            mostRecentDate = file.DateLastModified
        End If
    Next file
    
    ' Return the most recent file found
    Set GetMostRecentFile = recentFile
End Function

' Generate a unique file name if a file with the same name already exists
Function GenerateUniqueFileName(targetFolder As String, originalFileName As String) As String
    Dim fso As Object
    Dim baseName As String
    Dim extension As String
    Dim fileName As String
    Dim counter As Integer
    Dim timeStamp As String
    
    ' Create a FileSystemObject
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' Separate the base name and the extension
    baseName = fso.GetBaseName(originalFileName)
    extension = fso.GetExtensionName(originalFileName)
    
    ' Add a timestamp to create a unique name
    timeStamp = Format(Now, "yyyymmdd_hhnnss")
    fileName = baseName & "_" & timeStamp & "." & extension
    
    ' Ensure the new file name doesn't already exist
    Do While fso.FileExists(targetFolder & "\" & fileName)
        counter = counter + 1
        fileName = baseName & "_" & timeStamp & "_" & counter & "." & extension
    Loop
    
    ' Return the unique file name
    GenerateUniqueFileName = fileName
End Function

